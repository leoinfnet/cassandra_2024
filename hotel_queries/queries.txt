docker run --name cassandra -p 9042:9042 -d cassandra

create KEYSPACE meu_ks WITH replication = {'class': 'SimpleStrategy','replication_factor': '1'} ;

use meu_ks;

CREATE TABLE user(first_name text, last_name text, title text, PRIMARY KEY (last_name,first_name));

INSERT INTO user(first_name, last_name,title) VALUES ('Anakin', 'Skywalker','sith');

INSERT INTO user(first_name, last_name) VALUES ('Han', 'Solo');


select last_name, title, writetime(title) from user where last_name = 'Solo'


INSERT INTO user(first_name, last_name, title) VALUES ('Han', 'Solo', 'mercenario');
select last_name, title, writetime(title) from user


TTL
select last_name, title, TTL(title) from user where last_name = 'Solo'


UPDATE user USING TTL 10 SET title = 'NADA' where last_name = 'Solo' and first_name = 'Han';



Counter
 CREATE TABLE user_visits(user_id uuid PRIMARY KEY , visits counter) ;

UPDATE user_visits SET visits = visits + 1 WHERE user_id=ebf87fee-b372-4104-8a22-00c1252e3e05;


Collections
SET

The elements are unordered when stored, but are returned in sorted order.


ALTER TABLE user ADD emails set<text>;

update user SET emails = {'anakin@sith.com.br'} WHERE first_name = 'Anakin' AND last_name = 'Skywalker';

update user SET emails = emails + {'anakin@force.com.br'} WHERE first_name = 'Anakin' AND last_name = 'Skywalker';

update user SET emails = emails - {'anakin@force.com.br'} WHERE first_name = 'Anakin' AND last_name = 'Skywalker';


LIST
ALTER TABLE user ADD phone_numbers list<text>;

UPDATE user SET phone_numbers = ['21982505622']  WHERE first_name = 'Anakin' AND last_name = 'Skywalker';

UPDATE user SET phone_numbers = phone_numbers +  ['111111111']  WHERE first_name = 'Anakin' AND last_name = 'Skywalker';

UPDATE user SET phone_numbers =  ['22222222'] + phone_numbers WHERE first_name = 'Anakin' AND last_name = 'Skywalker';

UPDATE user SET phone_numbers[1] =  '33333333'  WHERE first_name = 'Anakin' AND last_name = 'Skywalker';

DELETE phone_numbers[0] from user WHERE first_name = 'Anakin' AND last_name = 'Skywalker';

MAP
 ALTER TABLE user ADD login_sessions map<timeuuid, int>;


UPDATE user SET login_sessions = { now(): 13, now(): 18} WHERE first_name = 'Anakin' AND last_name = 'Skywalker';



TUPLE
ALTER TABLE user ADD address tuple<text, int, text>;

UPDATE user SET address = ('RUA X', 12, 'Tatooine') WHERE first_name = 'Anakin' AND last_name = 'Skywalker';


ALTER TABLE user DROP address;

CREATE TYPE address (street text,number int,planet text);

ALTER TABLE user ADD addresses map<text, address>;


ALTER TABLE user ADD addresses map<text,frozen<address>>

UPDATE user SET addresses = addresses +{'home': { street: 'RUA B',number:12,planet: 'Tatooine' } } WHERE first_name = 'Anakin' AND last_name = 'Skywalker';


UPDATE user SET addresses = addresses +{'work': { street: 'RUA Z',number:12,planet: 'Mustafar' } } WHERE first_name = 'Anakin' AND last_name = 'Skywalker';



HOTEL

CREATE KEYSPACE hotel WITH replication = {'class': 'SimpleStrategy', 'replication_factor' : 1};

CREATE TYPE hotel.address (street text,city text,state_or_province text,postal_code text,country text);

CREATE TABLE hotels_by_poi (
    poi_name text,
    poi_description text STATIC,
    hotel_id text,
    name text,
    phone text,
    address frozen<address>,
    PRIMARY KEY ((poi_name), hotel_id)
) WITH comment = 'Q1. Buscar hoteis perto de um POI'
AND CLUSTERING ORDER BY (hotel_id ASC) ;


CREATE TABLE hotels (
    id text PRIMARY KEY,
    name text,
    phone text,
    address frozen<address>,
    pois set<text>
) WITH comment = 'Q2. Buscar informações de um hotel';


CREATE TABLE pois_by_hotel (
    poi_name text,
    hotel_id text,
    description text,
    PRIMARY KEY ((hotel_id), poi_name)
) WITH comment = 'Q3. Buscar pois perto de um hotel';



CREATE TABLE pois_by_hotel_bucketized(
    poi_name text,
    month int,
    hotel_id text,
    description text,
    PRIMARY KEY ((hotel_id,month), poi_name)
) WITH comment = 'Q3. Buscar pois perto de um hotel';


CREATE TABLE available_rooms_by_hotel_date (
    hotel_id text,
    date date,
    room_number smallint,
    is_available boolean,
    PRIMARY KEY ((hotel_id), date, room_number)
) WITH comment = 'Q4. Buscar disponibilidade by hotel / date';


CREATE TABLE amenities_by_room (
    hotel_id text,
    room_number smallint,
    amenity_name text,
    description text,
    PRIMARY KEY ((hotel_id, room_number), amenity_name)
) WITH comment = 'Q5. Find amenities para um quarto';

CREATE KEYSPACE reservation WITH replication = {'class': 'SimpleStrategy', 'replication_factor' : 3};




CREATE TYPE reservation.address (
    street text, city text,
    state_or_province text,
    postal_code text,
    country text
);

CREATE TABLE reservation.reservations_by_confirmation (
    confirm_number text,
    hotel_id text,
    start_date date,
    end_date date,
    room_number smallint,
    guest_id uuid,
    PRIMARY KEY (confirm_number)
) WITH comment = 'Q6. Find reservations by confirmation number';
CREATE TABLE reservation.reservations_by_hotel_date (
    hotel_id text,
    start_date date,
    room_number smallint,
    end_date date,
    confirm_number text,
    guest_id uuid,
    PRIMARY KEY ((hotel_id, start_date), room_number)
) WITH comment = 'Q7. Find reservations by hotel and date';


CREATE TABLE reservation.reservations_by_guest (
    guest_last_name text,
    guest_id uuid,
    confirm_number text,
    hotel_id text,
    start_date date,
    end_date date,
    room_number smallint,
    PRIMARY KEY ((guest_last_name), guest_id, confirm_number)
) WITH comment = 'Q8. Find reservations by guest name';

CREATE TABLE reservation.guests (
    guest_id uuid PRIMARY KEY,
    first_name text,
    last_name text,
    title text,
    emails set<text>,
    phone_numbers list<text>,
    addresses map<text, frozen<address>>
) WITH comment = 'Q9. Find guest by ID';

